{"version":3,"sources":["constants/common.js","components/Menu.js","utils/utils.js","components/EditForm.js","components/Todo.js","components/TodoList.js","components/TodoForm.js","components/SearchForm.js","components/App.js","serviceWorker.js","index.js"],"names":["TODO_STATUS","REMAINING","ALL","COMPLETED","Menu","props","react_default","a","createElement","className","viewState","onClick","setShowState","purifyText","string","replace","trim","checkValidInput","Object","toConsumableArray","some","el","TodoForm","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","_e$target","target","value","name","setState","defineProperty","onEditTodo","preventDefault","stopPropagation","state","text","id","prevTodo","completed","editing","todo","onSubmit","onChange","type","placeholder","autoComplete","React","Component","Todo","toggleCompleted","EditForm","deleteTodo","toggleEditOption","TodoList","renderTodo","itemsToShow","length","map","components_Todo","key","updateOnChange","submitTodo","updateTodo","Date","now","toString","Fragment","SearchForm","updateSearchQuery","clearSearch","searchValue","App","updateTodoList","prevState","todos","concat","objectSpread","generateTodoItems","showState","filter","includes","searchQuery","editedTodo","todoList","console","log","components_Menu","components_SearchForm","components_TodoForm","components_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5e76db33.chunk.js","sourcesContent":["const TODO_STATUS = {\n  REMAINING: 'remaining',\n  ALL: 'all',\n  COMPLETED: 'completed'\n};\n\nexport { TODO_STATUS };\n","import React from 'react';\n\nimport { TODO_STATUS } from '../constants/common';\n\nconst Menu = props => {\n  return (\n    <div className=\"nav-button\">\n      <button\n        className={props.viewState === TODO_STATUS.ALL ? 'active' : null}\n        onClick={() => props.setShowState(TODO_STATUS.ALL)}\n      >\n        Show All\n      </button>\n      <button\n        className={props.viewState === TODO_STATUS.REMAINING ? 'active' : null}\n        onClick={() => props.setShowState(TODO_STATUS.REMAINING)}\n      >\n        Remaining\n      </button>\n      <button\n        className={props.viewState === TODO_STATUS.COMPLETED ? 'active' : null}\n        onClick={() => props.setShowState(TODO_STATUS.COMPLETED)}\n      >\n        Completed\n      </button>\n    </div>\n  );\n};\n\nexport default Menu;\n","const purifyText = string => string.replace(/\\s{2,}/g, ' ').trim();\n\nconst checkValidInput = string => [...string].some(el => el !== ' ');\n\nexport { purifyText };\nexport { checkValidInput };\n","import React from 'react';\n\nimport { purifyText } from '../utils/utils';\nimport { checkValidInput } from '../utils/utils';\n\nclass TodoForm extends React.Component {\n  constructor(props) {\n    super(props);\n    const todo = props.prevTodo;\n\n    this.state = {\n      text: todo.text\n    };\n  }\n\n  handleChange = e => {\n    const { value, name } = e.target;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  onEditTodo = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (checkValidInput(this.state.text))\n      this.props.onEditTodo({\n        id: this.props.prevTodo.id,\n        text: purifyText(this.state.text)\n          ? this.state.text\n          : this.props.prevTodo.text,\n        completed: this.props.prevTodo.completed,\n        editing: false\n      });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.onEditTodo}>\n        <input\n          className=\"todo-edit\"\n          name=\"text\"\n          onChange={this.handleChange}\n          type=\"text\"\n          placeholder=\"Edit Todo\"\n          value={this.state.text}\n          autoComplete=\"off\"\n        />\n      </form>\n    );\n  }\n}\n\nexport default TodoForm;\n","import React from 'react';\n\nimport EditForm from './EditForm';\n\nconst Todo = props => (\n  <li\n    onClick={() => !props.todo.editing && props.toggleCompleted(props.todo.id)}\n    className={props.todo.completed ? 'completed-todo' : null}\n  >\n    {props.todo.editing ? (\n      <EditForm prevTodo={props.todo} onEditTodo={props.onEditTodo} />\n    ) : (\n      <span>{props.todo.text}</span>\n    )}\n    <i\n      className=\"fa fa-trash delete\"\n      onClick={() => props.deleteTodo(props.todo.id)}\n    />\n    <i\n      className=\"fa fa-pencil edit\"\n      onClick={e => {\n        e.stopPropagation();\n        props.toggleEditOption(props.todo.id);\n      }}\n    />\n  </li>\n);\n\nexport default Todo;\n","import React from 'react';\nimport Todo from './Todo';\n\nclass TodoList extends React.Component {\n  render() {\n    const renderTodo = this.props.itemsToShow;\n\n    return (\n      <ul className={renderTodo && renderTodo.length > 0 ? '' : 'empty'}>\n        {renderTodo && renderTodo.length > 0 ? (\n          renderTodo.map(todo => (\n            <Todo\n              todo={todo}\n              key={todo.id}\n              toggleEditOption={this.props.toggleEditOption}\n              onEditTodo={this.props.onEditTodo}\n              deleteTodo={this.props.deleteTodo}\n              toggleCompleted={this.props.toggleCompleted}\n            />\n          ))\n        ) : (\n          <div className=\"no-items\">'No Items Found'</div>\n        )}\n      </ul>\n    );\n  }\n}\n\nexport default TodoList;\n","import React from 'react';\n\nimport { purifyText } from '../utils/utils';\nimport { checkValidInput } from '../utils/utils';\n\nclass TodoForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      text: ''\n    };\n  }\n\n  updateOnChange = e => {\n    const { value, name } = e.target;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  submitTodo = e => {\n    e.preventDefault();\n    if (checkValidInput(this.state.text)) {\n      this.props.updateTodo({\n        id: Date.now().toString(),\n        editing: false,\n        completed: false,\n        text: purifyText(this.state.text)\n      });\n      this.setState({ text: '' });\n    }\n  };\n\n  render() {\n    return (\n      <>\n        <form onSubmit={this.submitTodo}>\n          <input\n            name=\"text\"\n            type=\"text\"\n            autoComplete=\"off\"\n            className=\"todo-input\"\n            placeholder=\"Add Todo\"\n            value={this.state.text}\n            onChange={this.updateOnChange}\n          />\n          <i className=\"fa fa-plus add-todo\" onClick={this.submitTodo} />\n        </form>\n      </>\n    );\n  }\n}\n\nexport default TodoForm;\n","import React from 'react';\n\nimport { purifyText } from '../utils/utils';\n\nclass SearchForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      text: props.searchValue\n    };\n  }\n\n  updateOnChange = e => {\n    const { value, name } = e.target;\n    this.setState(\n      {\n        [name]: value\n      },\n      this.props.updateSearchQuery(value)\n    );\n  };\n\n  clearSearch = () => {\n    this.setState({ text: '' });\n    this.props.updateSearchQuery('');\n  };\n\n  submitTodo = e => {\n    e.preventDefault();\n  };\n\n  render() {\n    return (\n      <>\n        <form onSubmit={this.submitTodo}>\n          <input\n            name=\"text\"\n            type=\"text\"\n            autoComplete=\"off\"\n            className=\"todo-input\"\n            placeholder=\"Search Todo\"\n            value={this.state.text}\n            onChange={this.updateOnChange}\n          />\n          {purifyText(this.state.text) ? (\n            <i className=\"fa fa-times add-todo\" onClick={this.clearSearch} />\n          ) : null}\n        </form>\n      </>\n    );\n  }\n}\n\nexport default SearchForm;\n","import React, { Component } from 'react';\n\nimport Menu from './Menu';\nimport TodoList from './TodoList';\nimport TodoForm from './TodoForm';\nimport SearchForm from './SearchForm';\nimport { purifyText } from '../utils/utils';\nimport { TODO_STATUS } from '../constants/common';\n\nimport '../assets/css/styles';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      todos: [],\n      searchQuery: '',\n      showState: TODO_STATUS.ALL\n    };\n  }\n\n  updateTodoList = todo => {\n    this.setState(prevState => ({\n      todos: [todo, ...prevState.todos]\n    }));\n  };\n\n  toggleEditOption = id => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo =>\n        todo.id === id\n          ? { ...todo, editing: !todo.editing }\n          : { ...todo, editing: false }\n      )\n    }));\n  };\n\n  toggleCompleted = id => {\n    this.setState(state => ({\n      todos: state.todos.map(todo => {\n        if (todo.id === id) return { ...todo, completed: !todo.completed };\n        return todo;\n      })\n    }));\n  };\n\n  generateTodoItems = () => {\n    if (this.state.showState === TODO_STATUS.REMAINING)\n      return this.state.todos.filter(\n        todo => !todo.completed && todo.text.includes(this.state.searchQuery)\n      );\n\n    if (this.state.showState === TODO_STATUS.COMPLETED)\n      return this.state.todos.filter(\n        todo => todo.completed && todo.text.includes(this.state.searchQuery)\n      );\n\n    if (this.state.showState === TODO_STATUS.ALL)\n      return this.state.todos.filter(todo =>\n        todo.text.includes(this.state.searchQuery)\n      );\n  };\n\n  setShowState = showState => {\n    this.setState({ showState });\n  };\n\n  deleteTodo = id => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== id)\n    }));\n  };\n\n  onEditTodo = editedTodo => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo =>\n        todo.id === editedTodo.id ? editedTodo : todo\n      )\n    }));\n  };\n\n  updateSearchQuery = string => {\n    this.setState(prevState => ({\n      searchQuery: purifyText(string)\n    }));\n  };\n\n  render() {\n    const todoList = this.generateTodoItems();\n    console.log(this.state.searchQuery);\n    return (\n      <div className=\"App\">\n        <h1>TODO List</h1>\n        <Menu\n          viewState={this.state.showState}\n          setShowState={this.setShowState}\n        />\n        <SearchForm\n          searchValue={this.state.searchQuery}\n          updateSearchQuery={this.updateSearchQuery}\n        />\n        <TodoForm updateTodo={this.updateTodoList} />\n        <TodoList\n          itemsToShow={todoList}\n          onEditTodo={this.onEditTodo}\n          deleteTodo={this.deleteTodo}\n          toggleCompleted={this.toggleCompleted}\n          toggleEditOption={this.toggleEditOption}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
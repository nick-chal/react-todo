{"version":3,"sources":["constants/common.js","components/Menu.js","utils/strings.js","components/EditForm.js","components/Todo.js","components/TodoList.js","components/TodoForm.js","components/SearchForm.js","components/App.js","serviceWorker.js","index.js"],"names":["TODO_STATUS","REMAINING","ALL","COMPLETED","Menu","props","react_default","a","createElement","className","viewState","onClick","setShowState","purifyText","string","replace","trim","checkValidInput","Object","toConsumableArray","some","el","EditForm","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","_e$target","target","value","name","setState","defineProperty","submitEditTodo","preventDefault","stopPropagation","state","text","onEditTodo","id","prevTodo","completed","editing","cancelEdit","objectSpread","todo","onSubmit","type","autoComplete","placeholder","onChange","React","Component","Todo","toggleCompleted","components_EditForm","Fragment","deleteTodo","toggleEditOption","TodoList","todoList","length","map","components_Todo","key","TodoForm","submitTodo","updateTodo","Date","now","toString","SearchForm","updateSearchQuery","clearSearch","searchValue","App","componentDidUpdate","todos","localStorage","setItem","JSON","stringify","componentDidMount","parse","getItem","updateTodoList","prevState","concat","generateTodoItems","showState","filter","includes","searchQuery","editedTodo","components_Menu","components_SearchForm","components_TodoForm","components_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fb9c1f06.chunk.js","sourcesContent":["const TODO_STATUS = {\n  REMAINING: 'remaining',\n  ALL: 'all',\n  COMPLETED: 'completed'\n};\n\nexport { TODO_STATUS };\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { TODO_STATUS } from '../constants/common';\n\n/**\n * @param {object} props\n */\nconst Menu = props => {\n  return (\n    <div className=\"nav-button\">\n      <button\n        className={props.viewState === TODO_STATUS.ALL ? 'active' : null}\n        onClick={() => props.setShowState(TODO_STATUS.ALL)}\n      >\n        Show All\n      </button>\n      <button\n        className={props.viewState === TODO_STATUS.REMAINING ? 'active' : null}\n        onClick={() => props.setShowState(TODO_STATUS.REMAINING)}\n      >\n        Remaining\n      </button>\n      <button\n        className={props.viewState === TODO_STATUS.COMPLETED ? 'active' : null}\n        onClick={() => props.setShowState(TODO_STATUS.COMPLETED)}\n      >\n        Completed\n      </button>\n    </div>\n  );\n};\n\nMenu.propTypes = {\n  viewState: PropTypes.string,\n  setShowState: PropTypes.func\n};\n\nexport default Menu;\n","/**\n * Remove any starting or trailing spaces and multiple spaces between words.\n *\n * @param {String} string\n */\nconst purifyText = string => string.replace(/\\s{2,}/g, ' ').trim();\n\n/**\n * Check if the string contains any othe character other than spaces.\n *\n * @param {String} string\n * @returns {Boolean}\n */\nconst checkValidInput = string => [...string].some(el => el !== ' ');\n\nexport { purifyText, checkValidInput };\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { checkValidInput } from '../utils/strings';\n\n/**\n * Handle the edit of the todo.\n */\nclass EditForm extends React.Component {\n  /**\n   * @param {props} props\n   */\n  constructor(props) {\n    super(props);\n    const todo = props.prevTodo;\n\n    this.state = {\n      text: todo.text\n    };\n  }\n\n  /**\n   * Handle the change of the input field.\n   *\n   * @param {object} e The event object of the form.\n   */\n  handleChange = e => {\n    const { value, name } = e.target;\n\n    this.setState({\n      [name]: value\n    });\n  };\n\n  /**\n   * Submit the edited todo.\n   *\n   * @param {object} e The event object of the form.\n   */\n  submitEditTodo = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (checkValidInput(this.state.text)) {\n      this.props.onEditTodo({\n        id: this.props.prevTodo.id,\n        text: this.state.text,\n        completed: this.props.prevTodo.completed,\n        editing: false\n      });\n    }\n  };\n\n  /**\n   * Cancel the edit of todo and send original value.\n   */\n  cancelEdit = () => {\n    this.props.onEditTodo({ ...this.props.prevTodo, editing: false });\n  };\n\n  /**\n   * Render the Editform for each todo.\n   */\n  render() {\n    return (\n      <form onSubmit={this.submitEditTodo}>\n        <input\n          name=\"text\"\n          type=\"text\"\n          autoComplete=\"off\"\n          className=\"todo-edit\"\n          placeholder=\"Edit Todo\"\n          value={this.state.text}\n          onChange={this.handleChange}\n        />\n        <i className=\"fa fa-times cancel-edit\" onClick={this.cancelEdit} />\n        <i className=\"fa fa-check accept-edit\" onClick={this.submitEditTodo} />\n      </form>\n    );\n  }\n}\n\nEditForm.propTypes = {\n  prevTodo: PropTypes.object,\n  onEditTodo: PropTypes.func\n};\n\nexport default EditForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport EditForm from './EditForm';\n\n/**\n * Show individual todo along with the icons.\n *\n * @param {object} props\n */\nconst Todo = props => (\n  <li\n    onClick={() => !props.todo.editing && props.toggleCompleted(props.todo.id)}\n    className={props.todo.completed ? 'completed-todo' : null}\n  >\n    {props.todo.editing ? (\n      <EditForm prevTodo={props.todo} onEditTodo={props.onEditTodo} />\n    ) : (\n      <>\n        <span>{props.todo.text}</span>\n        <i\n          className=\"fa fa-trash delete\"\n          onClick={() => props.deleteTodo(props.todo.id)}\n        />\n        <i\n          className=\"fa fa-pencil edit\"\n          onClick={e => {\n            e.stopPropagation();\n            props.toggleEditOption(props.todo.id);\n          }}\n        />\n      </>\n    )}\n  </li>\n);\n\nTodo.propTypes = {\n  todo: PropTypes.object,\n  onEditTodo: PropTypes.func,\n  toggleCompleted: PropTypes.func,\n  deleteTodo: PropTypes.func,\n  toggleEditOption: PropTypes.func\n};\n\nexport default Todo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Todo from './Todo';\n/**\n * Show the list of the todos.\n *\n * @param {object} props\n */\nconst TodoList = props => {\n  const todoList = props.todoList;\n\n  return (\n    <ul className={todoList && todoList.length > 0 ? '' : 'empty'}>\n      {todoList && todoList.length > 0 ? (\n        todoList.map(todo => (\n          <Todo\n            todo={todo}\n            key={todo.id}\n            toggleEditOption={props.toggleEditOption}\n            onEditTodo={props.onEditTodo}\n            deleteTodo={props.deleteTodo}\n            toggleCompleted={props.toggleCompleted}\n          />\n        ))\n      ) : (\n        <div className=\"no-items\"> {`No Items Found`}</div>\n      )}\n    </ul>\n  );\n};\n\nTodoList.propTypes = {\n  todoList: PropTypes.array,\n  toggleEditOption: PropTypes.func,\n  onEditTodo: PropTypes.func,\n  deleteTodo: PropTypes.func,\n  toggleCompleted: PropTypes.func\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { purifyText, checkValidInput } from '../utils/strings';\n\n/**\n * Form to add new todo.\n */\nclass TodoForm extends React.Component {\n  /**\n   * @param {object} props\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      text: ''\n    };\n  }\n\n  /**\n   * Handle the change on input field.\n   *\n   * @param {object} e\n   */\n  handleChange = e => {\n    const { value, name } = e.target;\n\n    this.setState({\n      [name]: value\n    });\n  };\n\n  /**\n   * Submit the new todo along with its properties.\n   *\n   * @param {object} e\n   */\n  submitTodo = e => {\n    e.preventDefault();\n    if (checkValidInput(this.state.text)) {\n      this.props.updateTodo({\n        id: Date.now().toString(),\n        editing: false,\n        completed: false,\n        text: purifyText(this.state.text)\n      });\n      this.setState({ text: '' });\n    }\n  };\n\n  /**\n   * Renders the form to add new todo.\n   */\n  render() {\n    return (\n      <>\n        <form onSubmit={this.submitTodo}>\n          <input\n            name=\"text\"\n            type=\"text\"\n            autoComplete=\"off\"\n            className=\"todo-input\"\n            placeholder=\"Add Todo\"\n            value={this.state.text}\n            onChange={this.handleChange}\n          />\n          <i className=\"fa fa-plus add-todo\" onClick={this.submitTodo} />\n        </form>\n      </>\n    );\n  }\n}\n\nTodoForm.propTypes = {\n  updateTodo: PropTypes.func\n};\n\nexport default TodoForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { purifyText } from '../utils/strings';\n\n/**\n * Search component shows search field and handles query.\n */\nclass SearchForm extends React.Component {\n  /**\n   * @param {object} props\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      text: props.searchValue\n    };\n  }\n\n  /**\n   * Handle the change of the input field.\n   *\n   * @param {object} e\n   */\n  handleChange = e => {\n    const { value, name } = e.target;\n\n    this.setState(\n      {\n        [name]: value\n      },\n      this.props.updateSearchQuery(value)\n    );\n  };\n\n  /**\n   * Clear the input field value.\n   */\n  clearSearch = () => {\n    this.setState({ text: '' });\n    this.props.updateSearchQuery('');\n  };\n\n  /**\n   * Prevents the refresh of the page on pressing enter.\n   *\n   * @param {object} e\n   */\n  submitTodo = e => {\n    e.preventDefault();\n  };\n\n  /**\n   * Renders the search form to input search query.\n   */\n  render() {\n    return (\n      <>\n        <form onSubmit={this.submitTodo}>\n          <input\n            name=\"text\"\n            type=\"text\"\n            autoComplete=\"off\"\n            className=\"todo-input\"\n            placeholder=\"Search Todo\"\n            value={this.state.text}\n            onChange={this.handleChange}\n          />\n          {purifyText(this.state.text) ? (\n            <i className=\"fa fa-times add-todo\" onClick={this.clearSearch} />\n          ) : null}\n        </form>\n      </>\n    );\n  }\n}\n\nSearchForm.propTypes = {\n  searchValue: PropTypes.string,\n  updateSearchQuery: PropTypes.func\n};\nexport default SearchForm;\n","import React, { Component } from 'react';\n\nimport Menu from './Menu';\nimport TodoList from './TodoList';\nimport TodoForm from './TodoForm';\nimport SearchForm from './SearchForm';\nimport { purifyText } from '../utils/strings';\nimport { TODO_STATUS } from '../constants/common';\n\nimport '../assets/css/styles';\n\n/**\n * The main container App.\n */\nclass App extends Component {\n  /**\n   * @param {object} props Props from the parent.\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      todos: [],\n      searchQuery: '',\n      showState: TODO_STATUS.ALL\n    };\n  }\n\n  componentDidUpdate = () => {\n    const todoList = this.state.todos;\n\n    localStorage.setItem('todo-list', JSON.stringify(todoList));\n  };\n\n  componentDidMount = () => {\n    const todos = JSON.parse(localStorage.getItem('todo-list'));\n\n    if (todos && todos.length > 0) {\n      this.setState({\n        todos\n      });\n    }\n  };\n\n  /**\n   * Add new todo to the start of array.\n   *\n   * @param {object} todo Todo item from the TodoForm.\n   */\n  updateTodoList = todo => {\n    this.setState(prevState => ({\n      todos: [todo, ...prevState.todos]\n    }));\n  };\n\n  /**\n   * Toggle editing option and show or hide input field in list.\n   *\n   * @param {int} id The id of the todo to edit from EditForm.\n   */\n  toggleEditOption = id => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo =>\n        todo.id === id\n          ? { ...todo, editing: !todo.editing }\n          : { ...todo, editing: false }\n      )\n    }));\n  };\n\n  /**\n   * Toggle whether the todo is completed or remaining.\n   *\n   * @param {int} id The id of the todo to toggle.\n   */\n  toggleCompleted = id => {\n    this.setState(state => ({\n      todos: state.todos.map(todo => {\n        if (todo.id === id) {\n          return { ...todo, completed: !todo.completed };\n        }\n\n        return todo;\n      })\n    }));\n  };\n\n  /**\n   * Generate the todo list from main list based on the showState menu and search query.\n   *\n   * @returns {Array} Returns the filtered array of todos.\n   */\n  generateTodoItems = () => {\n    if (this.state.showState === TODO_STATUS.REMAINING) {\n      return this.state.todos.filter(\n        todo => !todo.completed && todo.text.includes(this.state.searchQuery)\n      );\n    }\n\n    if (this.state.showState === TODO_STATUS.COMPLETED) {\n      return this.state.todos.filter(\n        todo => todo.completed && todo.text.includes(this.state.searchQuery)\n      );\n    }\n\n    if (this.state.showState === TODO_STATUS.ALL) {\n      return this.state.todos.filter(todo =>\n        todo.text.includes(this.state.searchQuery)\n      );\n    }\n  };\n\n  /**\n   * Set the show state ie show all || remaining || compeleted.\n   *\n   * @param {String} showState The state selected in the menu component.\n   */\n  setShowState = showState => {\n    this.setState({ showState });\n  };\n\n  /**\n   * Deletes the todo based on the id.\n   *\n   * @param {int} id The id of the todo.\n   */\n  deleteTodo = id => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== id)\n    }));\n  };\n\n  /**\n   * Edit the text of the todo.\n   *\n   * @param {object} editedTodo The edited todo from the EditForm.\n   */\n  onEditTodo = editedTodo => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo =>\n        todo.id === editedTodo.id ? editedTodo : todo\n      )\n    }));\n  };\n\n  /**\n   * Update the search query in the search form.\n   *\n   * @param {String} string The search text from the search form.\n   */\n  updateSearchQuery = string => {\n    this.setState({\n      searchQuery: purifyText(string)\n    });\n  };\n\n  /**\n   * Render the overall app.\n   */\n  render() {\n    const todoList = this.generateTodoItems();\n\n    return (\n      <div className=\"App\">\n        <h1>TODO List</h1>\n        <Menu\n          viewState={this.state.showState}\n          setShowState={this.setShowState}\n        />\n        <SearchForm\n          searchValue={this.state.searchQuery}\n          updateSearchQuery={this.updateSearchQuery}\n        />\n        <TodoForm updateTodo={this.updateTodoList} />\n        <TodoList\n          todoList={todoList}\n          onEditTodo={this.onEditTodo}\n          deleteTodo={this.deleteTodo}\n          toggleCompleted={this.toggleCompleted}\n          toggleEditOption={this.toggleEditOption}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}